<%if config[:soap] %>require 'savon'<%end%>

module <%=config[:constant]%>
  # TODO: document <%=config[:constant]%>::Client
  class Client
    # Mutators for configuration options
    attr_writer *<%=config[:constant]%>::VALID_CONFIG_OPTIONS

    # Accessors for configuration options
    <%=config[:constant]%>::VALID_CONFIG_OPTIONS.each do |opt|
      define_method(opt) { get_value(opt) }
    end

<%if config[:soap]%>
    # @attr [String] endpoint the service endpoint URL
    # @attr [String] username the username for authentication
    # @attr [String] password the password for authentication
    # @attr [String] namespace the namespace for SOAP requests
<%end%>
    # @attr [true,false,String] debug set to true or 'true' to enable debug logging (defaults to false)
    # @attr [Logger] logger the custom logger instance for debug logging (defaults to STDOUT)
    # TODO: document any other configuration attributes

    def debug?
      self.debug.to_s == 'true'
    end

    # Initializes the client.
    #
    # @param [Hash] options
    <%if config[:soap]%># @option options [String] :username The username for authenticating to the web service.
    # @option options [String] :password The password for authenticating to the web service.
    # @option options [String] :endpoint The address for connecting to the web service.
    # @option options [String] :namespace The XML namespace to use for requests.
    <%end%># @option options [true,false] :debug true enabled debug logging (defaults to false)
    # @option options [Logger] :logger a custom logger instance (defaults to STDOUT)
    # TODO: document any other config options
    def initialize(options={})
      options.each { |k,v| self.send("#{k}=", v) if self.respond_to?("#{k}=") }
    end

    # Retrieves an attribute's value. If the attribute has not been set
    # on this object, it is retrieved from the global configuration.
    #
    # @see <%=config[:constant]%>.configure
    # 
    # @param [Symbol] attribute the name of the attribute
    # @return [String] the value of the attribute
    def get_value(attribute)
      instance_variable_get("@#{attribute}") || <%=config[:constant]%>.send(attribute)
    end
<%if config[:soap]%>
    def send_soap_request(soap_action,soap_parameters={})
      begin
        response = soap_client.request :wsdl, soap_action do
          # Uncomment the following when the service requires fully-qualified input XML
          # soap.element_form_default = :qualified
          soap.body = soap_parameters
        end
      rescue Savon::SOAP::Fault => f
        # TODO: error handling
        raise f
      end
    end

    def soap_client
      Savon::Client.new
    end
<%end%>
  end
end
