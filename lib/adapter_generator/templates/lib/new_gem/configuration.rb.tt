require 'configlet'
require 'logger'

module <%=config[:constant]%>
  # All valid configurations options
  VALID_CONFIG_OPTIONS = [<%if config[:soap]%>:endpoint, :username, :password, :namespace, <%end%>:debug, :logger]
<%if config[:soap]%>
  DEFAULT_ENDPOINT = nil # TODO: fill in default endpoint
  DEFAULT_NAMESPACE = nil # TODO: fill in default namespace
<%end%>
  module Configuration
    include Configlet
 
    def self.extended(base)
      # Default configuration - happens whether or not .configure is called
      base.config :<%=config[:name]%> do
<%if config[:soap]%>
        default :endpoint => DEFAULT_ENDPOINT
        default :namespace => DEFAULT_NAMESPACE
<%end%>
        default :debug => 'false'
        # TODO - set default values here, for example:
        # default :my_opt => 'default value'
      end
    end

    # Mutators and accessors for configuration options
    VALID_CONFIG_OPTIONS.each do |config_opt|
      define_method(config_opt) do
        self[config_opt]
      end

      define_method("#{config_opt}=".to_sym) do |val|
        self[config_opt] = val
      end
    end

<%if config[:soap]%>
    # @attr [String] endpoint the service endpoint URL (defaults to <%=config[:constant]%>::DEFAULT_ENDPOINT)
    # @attr [String] username the username for authentication
    # @attr [String] password the password for authentication
    # @attr [String] namespace the namespace for SOAP requests (defaults to <%=config[:constant]%>::DEFAULT_NAMESPACE)
<%end%>
    # @attr [true,false,String] debug set to true or 'true' to enable debug logging (defaults to false)
    # TODO: document additional configuration attributes if necessary

    # @return [true,false] true if debug logging is enabled; false otherwie.
    def debug?
      self[:debug] == 'true'
    end

    # Sets the logger to use for debug messages
    attr_writer :logger

    # @return [Logger] the logger to use for debug messages (defaults to STDOUT)
    def logger
      @logger ||= Logger.new(STDOUT)
    end

    # Configures this module through the given +block+.
    # Default configuration options will be applied unless 
    # they are explicitly overridden in the +block+.
    #
    # @yield [_self] configures service connection options
    # @yieldparam [<%=config[:constant]%>] _self the object on which the configure method was called
    # @example Typical case utilizing defaults
    #   <%=config[:constant]%>.configure do |config|
    #     config.username = 'my_user'
    #     config.password = 'my_pass'
    #   end
    # @example Overriding defaults
    #   <%=config[:constant]%>.configure do |config|
    #     config.username = 'my_user'
    #     config.password = 'my_pass'
    #     config.endpoint = 'http://my.endpoint.com'
    #   end
    # @return [<%=config[:constant]%>] _self
    # @see VALID_CONFIG_OPTIONS
    def configure
      config :<%=config[:name]%> do
        yield self
      end

      self
    end

    # Create a hash of configuration options and their
    # values.
    #
    # @return [Hash<Symbol,Object>] the options hash
    def options
      VALID_CONFIG_OPTIONS.inject({}) do |option, key|
        option.merge!(key => send(key))
      end
    end

    # Resets this module's configuration.
    # Configuration options will be set to default values
    # if they exist; otherwise, they will be set to nil.
    #
    # @see VALID_CONFIG_OPTIONS
<%if config[:soap]%>
    # @see DEFAULT_ENDPOINT
    # @see DEFAULT_NAMESPACE
<%end%>
    def reset
      VALID_CONFIG_OPTIONS.each { |opt| self.send("#{opt}=", nil) } 
    end
  end
end
