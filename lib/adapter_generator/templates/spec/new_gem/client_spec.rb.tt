require 'spec_helper'

describe <%=config[:constant]%>::Client do
  subject { client }

  after { <%=config[:constant]%>.reset }

  let(:client) { <%=config[:constant]%>::Client.new(options) }
<%if config[:soap]%>
  let(:endpoint) { 'https://foo.com?wsdl' }
  let(:username) { 'test_user' }
  let(:password) { 'secret' }
  let(:namespace) { 'http://foo.com/namespace' }
<%end%>
  let(:debug) { true }
  let(:logger) { mock() }

  let(:options) do
    {<%if config[:soap]%>:endpoint => endpoint,
     :username => username,
     :password => password,
     :namespace => namespace,<%end%>
     :debug => debug,
     :logger => logger
    }
  end

  context 'with default configuration' do
    let(:client) { <%=config[:constant]%>::Client.new }
<%if config[:soap]%>
    its(:endpoint) { should == <%=config[:constant]%>::DEFAULT_ENDPOINT }
    its(:namespace) { should == <%=config[:constant]%>::DEFAULT_NAMESPACE }
    its(:username) { should be_nil }
    its(:password) { should be_nil }
<%else%>
    it { should_not be_debug }
    its(:logger) { should be_an_instance_of(Logger) }

    # TODO: test for config options with default values. For example,
    # its(:required_setting) { should == <%=config[:constant]%>::DEFAULT_REQUIRED_SETTING }
    # its(:optional_setting) { should be_nil }
<%end%>
  end

  context 'with non-default configuration' do
<%if config[:soap]%>
    its(:endpoint) { should == endpoint }
    its(:namespace) { should == namespace }
    its(:username) { should == username }
    its(:password) { should == password }
<%end%>
    it { should be_debug }
    its(:logger) { should == logger }

<%if config[:soap]%>
    describe "#endpoint=" do
      subject { client.endpoint = new_endpoint }

      context 'with nil endpoint' do
        let(:new_endpoint) { nil }

        context 'when there is an endpoint configured at the top-level module' do
          let(:configured_endpoint) { 'http://endpoint.from.config.com' }
          before { <%=config[:constant]%>.configure { |config| config.endpoint = configured_endpoint } }

          it 'should change the value of the endpoint to match the configuration' do
            expect { subject }.to change { client.endpoint }.from(endpoint).to(configured_endpoint)
          end
        end

        context 'when there is no endpoint configured at the top level' do
          it 'should change the value of the endpoint to match the default' do
            expect { subject }.to change { client.endpoint }.from(endpoint).to(<%=config[:constant]%>::DEFAULT_ENDPOINT)
          end
        end
      end

      context 'with new endpoint' do
        let(:new_endpoint) { 'https://totally.new.com' }

        it 'should change the value of the endpoint to match the new value' do
          expect { subject }.to change { client.endpoint }.from(endpoint).to(new_endpoint)
        end
      end
    end

    describe "#namespace=" do
      subject { client.namespace = new_namespace }

      context 'with nil namespace' do
        let(:new_namespace) { nil }

        context 'when there is a namespace configured at the top-level module' do
          let(:configured_namespace) { 'http://namespace.from.config.com' }
          before { <%=config[:constant]%>.configure { |config| config.namespace = configured_namespace } }

          it 'should change the value of the namespace to match the configuration' do
            expect { subject }.to change { client.namespace }.from(namespace).to(configured_namespace)
          end
        end

        context 'when there is no namespace configured at the top level' do
          it 'should change the value of the namespace to match the default' do
            expect { subject }.to change { client.namespace }.from(namespace).to(<%=config[:constant]%>::DEFAULT_NAMESPACE)
          end
        end
      end

      context 'with new namespace' do
        let(:new_namespace) { 'https://totally.new.com' }

        it 'should change the value of the namespace to match the new value' do
          expect { subject }.to change { client.namespace }.from(namespace).to(new_namespace)
        end
      end
    end

    describe "#username=" do
      subject { client.username = new_username }

      context 'with nil username' do
        let(:new_username) { nil }

        context 'when there is a username configured at the top-level module' do
          let(:configured_username) { 'configured user' }
          before { <%=config[:constant]%>.configure { |config| config.username = configured_username } }

          it 'should change the value of the username to match the configuration' do
            expect { subject }.to change { client.username }.from(username).to(configured_username)
          end
        end

        context 'when there is no username configured at the top level' do
          it 'should change the value of the username to match the default' do
            expect { subject }.to change { client.username }.from(username).to(nil)
          end
        end
      end

      context 'with new username' do
        let(:new_username) { 'new user' }

        it 'should change the value of the username to match the new value' do
          expect { subject }.to change { client.username }.from(username).to(new_username)
        end
      end
    end

    describe "#password=" do
      subject { client.password = new_password }

      context 'with nil password' do
        let(:new_password) { nil }

        context 'when there is a password configured at the top-level module' do
          let(:configured_password) { 'configured user' }
          before { <%=config[:constant]%>.configure { |config| config.password = configured_password } }

          it 'should change the value of the password to match the configuration' do
            expect { subject }.to change { client.password }.from(password).to(configured_password)
          end
        end

        context 'when there is no password configured at the top level' do
          it 'should change the value of the password to match the default' do
            expect { subject }.to change { client.password }.from(password).to(nil)
          end
        end
      end

      context 'with new password' do
        let(:new_password) { 'new user' }

        it 'should change the value of the password to match the new value' do
          expect { subject }.to change { client.password }.from(password).to(new_password)
        end
      end
    end
<%end%>
    describe '#debug=' do
      subject { client.debug = new_debug }

       context 'with nil debug' do
        let(:new_debug) { nil }

        context 'when there is a debug flag configured at the top-level module' do
          let(:configured_debug) { 'true' }
          before { <%=config[:constant]%>.configure { |config| config.debug = configured_debug } }

          it 'should set the debug flag according to the configuration' do
            expect { subject }.to_not change { client.debug? }
          end
        end

        context 'when there is no debug flag configured at the top level' do
          it 'should set the debug flag to the default' do
            expect { subject }.to change { client.debug? }.to(false)
          end
        end
      end

      context 'with new setting' do
        let(:new_debug) { 'false' }

        it 'should change the value of the debug flag to match the new value' do
          expect { subject }.to change { client.debug? }.from(true).to(false)
        end
      end
    end

    describe '#logger=' do
      subject { client.logger = new_logger }

       context 'with nil logger' do
        let(:new_logger) { nil }

        context 'when there is a logger configured at the top-level module' do
          let(:configured_logger) { mock() }
          before { <%=config[:constant]%>.configure { |config| config.logger = configured_logger } }

          it 'should change the value of the logger to match the configuration' do
            expect { subject }.to change { client.logger }.from(logger).to(configured_logger)
          end
        end

        context 'when there is no logger configured at the top level' do
          it 'should change the value of the logger to the default' do
            expect { subject }.to change { client.logger }
            client.logger.should be_an_instance_of(Logger)
          end
        end
      end

      context 'with new logger' do
        let(:new_logger) { mock() }

        it 'should change the value of the logger to match the new value' do
          expect { subject }.to change { client.logger }.from(logger).to(new_logger)
        end
      end
    end

    # TODO: test for all config options. For example,
    # its(:setting) { should == 'value' }

    # TODO: test writers for config options. For example,
    # describe "#my_setting" do
    #   subject { client.my_setting = new_val }
    #   let(:new_val) { 'new value' }
    #   it 'should change the value of my_setting' do
    #     expect { subject }.to change { client.my_setting }.from(nil).to(new_val)
    #   end
    # end
  end
end
